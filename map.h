#ifndef MAP_H
#define MAP_H

#define MAX_LOCATIONS 22


// Array to store the names of locations
char Locations[][20] = {"Chennai", "Bangalore", "Goa", "Yelagiri",
                        "Mysore", "Udupi", "Pondicherry", "Mangalore",
                        "Mandya", "Kannur", "Murudeshwar", "Tirunelveli",
                        "Kundapur", "Chikkamagaluru", "Bandipur", "Madurai",
                        "Coimbatore", "Pune", "Trichy", "Ernakulam",
                        "Thanjavur", "Mumbai"};

// Adjacency matrix representing the distance between locations
int Map[][22] = {
    {0, 337, 0, 226, 483, 0, 166, 705, 439, 0, 835, 622, 0, 0, 0, 463, 0, 0, 0, 0, 0, 0},
    {337, 0, 562, 158, 143, 0, 0, 370, 99, 321, 501, 581, 0, 292, 0, 0, 363, 839, 0, 0, 0, 961},
    {0, 562, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {226, 158, 0, 0, 292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {483, 143, 0, 292, 0, 307, 0, 0, 44, 0, 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 307, 0, 0, 0, 344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 499, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 370, 0, 0, 0, 0, 0, 0, 0, 144, 0, 0, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {439, 99, 0, 0, 44, 344, 0, 0, 0, 0, 0, 436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 321, 0, 0, 0, 0, 0, 144, 0, 0, 0, 653, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {835, 501, 0, 0, 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {622, 581, 0, 0, 0, 0, 161, 0, 436, 653, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 348, 0, 0, 0, 0, 0, 0},
    {463, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 348, 0, 210, 0, 132, 282, 0, 0},
    {0, 363, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 218, 0, 0, 0},
    {0, 839, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 218, 0, 0, 387, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282, 0, 0, 387, 0, 439, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 439, 0, 101},
    {0, 961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 101, 0}
};
//Adjaceny matrix to store the surge timings while travelling between 2 locations
int Surge[][22] = {
    {8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9},
    {10, 8, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10},
    {11, 12, 8, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11},
    {12, 13, 14, 8, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12},
    {13, 14, 15, 16, 8, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13},
    {14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15},
    {15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16},
    {16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17},
    {17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8},
    {8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9},
    {9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10},
    {10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11},
    {11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12},
    {12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13},
    {13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14},
    {14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15},
    {15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16},
    {16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17},
    {17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8},
    {8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9},
    {9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10},
    {10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 10, 11}
};

#endif